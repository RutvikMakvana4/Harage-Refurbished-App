import { baseUrl } from "../../../common/constants/configConstants";

export default class OneItemResource {
    constructor(data, findImage) {
        const matchingImages = findImage.filter(image => image.itemId.toString() === data._id.toString());
        const image = matchingImages.map(image => ({
            _id: image._id,
            url: baseUrl(image.image)
        }));

        this._id = data._id,
            this.productName = data.productName,
            this.brand = data.brand,
            this.otherBrand = data.otherBrand,
            this.model = data.model,
            this.conditions = data.conditions,
            this.price = this.formatPrice(data.price),
            this.priceFlexibility = data.priceFlexibility,
            this.warrantyStatus = data.warrantyStatus,
            this.additionalDetails = data.additionalDetails,
            this.features = data.features,
            this.connectivityFeatures = data.connectivityFeatures,
            this.smartTvFeatures = data.smartTvFeatures,
            this.coolingCapacity = data.coolingCapacity,
            this.energyEfficiency = data.energyEfficiency,
            this.screenSize = data.screenSize,
            this.otherScreenSize = data.otherScreenSize,
            this.storage = data.storage,
            this.otherStorage = data.otherStorage,
            this.ram = data.ram,
            this.otherRam = data.otherRam,
            this.batteryLife = data.batteryLife,
            this.type = data.type,
            this.model = data.model,
            this.otherType = data.otherType,
            this.color = data.color,
            this.blenderCapacity = data.blenderCapacity,
            this.compatibility = data.compatibility,
            this.displayType = data.displayType,
            this.otherDisplayType = data.otherDisplayType,
            this.cuffSize = data.cuffSize,
            this.powerSource = data.powerSource,
            this.otherPowerSource = data.otherPowerSource,
            this.feature = data.feature,
            this.material = data.material,
            this.otherMaterial = data.otherMaterial,
            this.size = data.size,
            this.otherSize = data.otherSize,
            this.focalLength = data.focalLength,
            this.aperture = data.aperture,
            this.maxLoadCapacity = data.maxLoadCapacity,
            this.megapixels = data.megapixels,
            this.sensorSize = data.sensorSize,
            this.lensMount = data.lensMount,
            this.compatibleBrand = data.compatibleBrand,
            this.connectorType = data.connectorType,
            this.otherConnectorType = data.otherConnectorType,
            this.outputSpecification = data.outputSpecification,
            this.processor = data.processor,
            this.otherProcessor = data.otherProcessor,
            this.graphicsCard = data.graphicsCard,
            this.otherGraphicsCard = data.otherGraphicsCard,
            this.operatingSystem = data.operatingSystem,
            this.otherOperatingSystem = data.otherOperatingSystem,
            this.memoryCapacity = data.memoryCapacity,
            this.recordingQuality = data.recordingQuality,
            this.additionalFeatures = data.additionalFeatures,
            this.capacity = data.capacity,
            this.otherCapacity = data.otherCapacity,
            this.connectionType = data.connectionType,
            this.otherConnectionType = data.otherConnectionType,
            this.formFactor = data.formFactor,
            this.otherFormFactor = data.otherFormFactor,
            this.recommendedSkinType = data.recommendedSkinType,
            this.otherRecommendedSkinType = data.otherRecommendedSkinType,
            this.cleaningBrushType = data.cleaningBrushType,
            this.waterResistance = data.waterResistance,
            this.chargingType = data.chargingType,
            this.activityTracking = data.activityTracking,
            this.activityTracking = data.activityTracking,
            this.resolution = data.resolution,
            this.storageCapacity = data.storageCapacity,
            this.otherStorageCapacity = data.otherStorageCapacity,
            this.includedAccessories = data.includedAccessories,
            this.compatiblePlatform = data.compatiblePlatform,
            this.otherCompatiblePlatform = data.otherCompatiblePlatform,
            this.switchType = data.switchType,
            this.backlighting = data.backlighting,
            this.keyFeatures = data.keyFeatures,
            this.refreshRate = data.refreshRate,
            this.otherRefreshRate = data.otherRefreshRate,
            this.dpi = data.dpi,
            this.connectivity = data.connectivity,
            this.powerRating = data.powerRating,
            this.heatSettings = data.heatSettings,
            this.speedSettings = data.speedSettings,
            this.attachments = data.attachments,
            this.cableLength = data.cableLength,
            this.hdmiType = data.hdmiType,
            this.otherHdmiType = data.otherHdmiType,
            this.compatibleHeadphoneModels = data.compatibleHeadphoneModels,
            this.shavingSystem = data.shavingSystem,
            this.otherShavingSystem = data.otherShavingSystem,
            this.cleaningSystem = data.cleaningSystem,
            this.compatibilityAccessories = data.compatibilityAccessories,
            this.trackingMetrics = data.trackingMetrics,
            this.voiceAssistance = data.voiceAssistance,
            this.otherVoiceAssistance = data.otherVoiceAssistance,
            this.colorTemperature = data.colorTemperature,
            this.brightness = data.brightness,
            this.smartFeatures = data.smartFeatures,
            this.installationType = data.installationType,
            this.measurementMetrics = data.measurementMetrics,
            this.maxWeightCapacity = data.maxWeightCapacity,
            this.indoorOutdoor = data.indoorOutdoor,
            this.compatibleOperatingSystem = data.compatibleOperatingSystem,
            this.otherCompatibleOperatingSystem = data.otherCompatibleOperatingSystem,
            this.brandMaterial = data.brandMaterial,
            this.otherBrandMaterial = data.otherBrandMaterial,
            this.numberOfSlices = data.numberOfSlices,
            this.mountType = data.mountType,
            this.otherMountType = data.otherMountType,
            this.compatibleTvSize = data.compatibleTvSize,
            this.weightCapacity = data.weightCapacity,
            this.screenType = data.screenType,
            this.otherScreenType = data.otherScreenType,
            this.remoteType = data.remoteType,
            this.otherRemoteType = data.otherRemoteType,
            this.image = image.length > 0 ? image : null

        for (const key in this) {
            if (this[key] === null) {
                delete this[key];
            }
        }
    }

    formatPrice(price) {
        const formattedPrice = parseFloat(price).toLocaleString('en-US', {
            minimumFractionDigits: 0,
            maximumFractionDigits: 0,
        });
        return formattedPrice;
    }

}